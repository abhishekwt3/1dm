// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String         @id @default(uuid())
  user_name         String         @unique
  email             String         @unique
  password          String
  full_name         String?
  age               Int?
  preferences       Json?
  member            Boolean        @default(false)
  profile_image     String?
  phone_number      String?
  address           String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  orders            Order[]
  memberships       Membership[]
  subscriptions     Subscription[]
  
  @@index([email])
}

model Membership {
  id                String         @id @default(uuid())
  user_name         String
  start_date        DateTime       @default(now())
  end_date          DateTime?
  membership_type   MembershipType
  is_active         Boolean        @default(true)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  account           Account        @relation(fields: [user_name], references: [user_name])
  
  @@index([user_name])
}

enum MembershipType {
  STANDARD
  PREMIUM
}

model Order {
  id                String         @id @default(uuid())
  user_name         String
  location          String
  price             Float
  order_date        DateTime       @default(now())
  status            OrderStatus    @default(PENDING)
  payment_method    String?
  delivery_notes    String?
  payment_status      String?       @default("PENDING") // "PENDING", "PAID", "FAILED"
  payment_id          String?       // Reference to payment
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  account           Account        @relation(fields: [user_name], references: [user_name])
  order_items       OrderItem[]
  
  @@index([user_name])
}

model OrderItem {
  id                String         @id @default(uuid())
  order_id          String
  product_id        String
  quantity          Int
  price             Float
  
  // Relations
  order             Order          @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product           Product        @relation(fields: [product_id], references: [id])
  
  @@index([order_id])
  @@index([product_id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Subscription {
  id                String             @id @default(uuid())
  user_name         String
  equipment_id      String
  start_date        DateTime           @default(now())
  end_date          DateTime?
  deposit           Float
  pickup_location   String
  drop_location     String
  price             Float
  subscription_type SubscriptionType
  status            SubscriptionStatus @default(ACTIVE)
  payment_method    String?
  payment_status    String?       @default("PENDING") // "PENDING", "PAID", "FAILED"
  payment_id        String?       // Reference to payment
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  
  // Relations
  account           Account            @relation(fields: [user_name], references: [user_name])
  equipment         Equipment          @relation(fields: [equipment_id], references: [id])
  
  @@index([user_name])
  @@index([equipment_id])
}

enum SubscriptionType {
  WEEKLY
  MONTHLY
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model Store {
  id                String         @id @default(uuid())
  name              String
  location          String
  store_type        StoreType
  opening_hours     String?
  contact_number    String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  products          ProductStore[]
  
  @@index([location])
}

enum StoreType {
  PREMIUM
  BASIC
}

model Product {
  id                String         @id @default(uuid())
  product_name      String
  price             Float
  description       String?
  image             String?
  category          String?
  available         Boolean        @default(true)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  order_items       OrderItem[]
  stores            ProductStore[]
  
  @@index([category])
}

model ProductStore {
  product_id        String
  store_id          String
  stock             Int            @default(0)
  
  // Relations
  product           Product        @relation(fields: [product_id], references: [id])
  store             Store          @relation(fields: [store_id], references: [id])
  
  @@id([product_id, store_id])
  @@index([product_id])
  @@index([store_id])
}

model Equipment {
  id                String         @id @default(uuid())
  name              String
  monthly_price     Float
  weekly_price      Float
  deposit_amount    Float
  description       String?
  image             String?
  available         Boolean        @default(true)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  // Relations
  subscriptions     Subscription[]
  
  @@index([name])
}

model Payment {
  id                  String        @id @default(uuid())
  razorpay_order_id   String        @unique
  razorpay_payment_id String?       
  razorpay_signature  String?
  amount              Float
  currency            String        @default("INR")
  payment_for         String        // "SUBSCRIPTION" or "ORDER"
  status              PaymentStatus @default(CREATED)
  metadata            Json?         // Store additional data like subscription_id or order_id
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  
  @@index([razorpay_order_id])
}

enum PaymentStatus {
  CREATED
  ATTEMPTED
  FAILED
  COMPLETED
  REFUNDED
}

